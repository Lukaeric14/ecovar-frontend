{% comment %}
  Renders a list of product's price (regular, sale)

  Accepts:
  - product: {Object} Product Liquid object (optional)
  - use_variant: {Boolean} Renders selected or first variant price instead of overall product pricing (optional)
  - show_badges: {Boolean} Renders 'Sale' and 'Sold Out' tags if the product matches the condition (optional)
  - price_class: {String} Adds a price class to the price element (optional)
  - show_compare_at_price: {Boolean} Renders the compare at price if the product matches the condition (optional)

  Usage:
  {% render 'price', product: product %}
{% endcomment %}
{%- liquid
  if use_variant
    assign target = product.selected_or_first_available_variant
  else
    assign target = product
  endif

  assign compare_at_price = target.compare_at_price
  assign price = target.price | default: 1999
  assign price_min = product.price_min
  assign price_max = product.price_max
  assign available = target.available | default: false
  assign money_price = price | money
  assign money_price_min = price_min | money
  assign money_price_max = price_max | money
  if settings.currency_code_enabled
    assign money_price = price | money_with_currency
    assign money_price_min = price_min | money_with_currency
    assign money_price_max = price_max | money_with_currency
  endif

  if target == product and product.price_varies
    assign money_price = 'products.product.price.from_price_html' | t: price: money_price
  endif
-%}

<div
  class="
    price
    {%- if price_class %} {{ price_class }}{% endif -%}
    {%- if available == false %} price--sold-out{% endif -%}
    {%- if compare_at_price > price and product.quantity_price_breaks_configured? != true %} price--on-sale{% endif -%}
    {%- if compare_at_price > price and product.quantity_price_breaks_configured? %} volume-pricing--sale-badge{% endif -%}
    {%- if product.price_varies == false and product.compare_at_price_varies %} price--no-compare{% endif -%}
    {%- if show_badges %} price--show-badge{% endif -%}
  "
  style="color: #BBC29A;"
>
  {% if customer and customer.metafields.approval.status == 'approved' %}
  <div class="price__container">
    {%- comment -%}
      Explanation of description list:
        - div.price__regular: Displayed when there are no variants on sale
        - div.price__sale: Displayed when a variant is a sale
    {%- endcomment -%}
    <div class="price__regular">
      {%- if product.quantity_price_breaks_configured? -%}
        {%- if show_compare_at_price and compare_at_price -%}
          {%- unless product.price_varies == false and product.compare_at_price_varies %}
            <span class="visually-hidden visually-hidden--inline">
              {{- 'products.product.price.regular_price' | t -}}
            </span>
            <span>
              <s class="price-item price-item--regular variant-item__old-price">
                {% if settings.currency_code_enabled %}
                
                  {{ compare_at_price | money_with_currency }}
                {% else %}
                  {{ compare_at_price | money }}
                {% endif %}
              </s>
            </span>
          {%- endunless -%}
        {%- endif -%}
        <span class="visually-hidden visually-hidden--inline">{{ 'products.product.price.regular_price' | t }}</span>
        <span class="price-item price-item--regular">
          {{- 'products.product.volume_pricing.price_range' | t: minimum: money_price_min, maximum: money_price_max -}}
        </span>
      {%- else -%}
        <span class="visually-hidden visually-hidden--inline">{{ 'products.product.price.regular_price' | t }}</span>
        <div class="custom-price-wrapper" id={{ product.id }}>
        <span class="price-item price-item--regular ">
          {{ money_price }}
        </span>
        </div>
          
      {%- endif -%}
    </div>
    
  {% if customer and customer.metafields.approval.status == 'approved' %}
    <script>
      (function waitForCustomPrices(retries = 200) {
    
        const productNsId = "{{ product.metafields.netsuite.ns_id }}";
        const productId = "{{ product.id }}"

        console.log({productId})
        const wrapper = document.getElementById(productId)
        wrapper.style.visibility = 'hidden'
        const priceEl = wrapper?.querySelector('.price-item--regular');

        console.log({priceEl})
    
        if (!productNsId || !priceEl || !wrapper) return;
    
        if (window.CUSTOMER_CUSTOM_PRICES && Array.isArray(window.CUSTOMER_CUSTOM_PRICES)) {
          const match = window.CUSTOMER_CUSTOM_PRICES.find(p => p.item === productNsId);
    
          if (match) {
            priceEl.textContent = `${parseFloat(match.price).toFixed(2)} AED`;
          }

          wrapper.style.visibility = 'visible';
        } else if (retries > 0) {
          setTimeout(() => waitForCustomPrices(retries - 1), 10);
        } else {
          wrapper.style.visibility = 'visible'; // show fallback price
        }
      })();
    </script>
    {% endif %}
    <div class="price__sale">
      {%- unless product.price_varies == false and product.compare_at_price_varies %}
        <span class="visually-hidden visually-hidden--inline">{{ 'products.product.price.regular_price' | t }}</span>
        <span>
          <s class="price-item price-item--regular">
            {% if settings.currency_code_enabled %}
              {{ compare_at_price | money_with_currency }}
            {% else %}
              {{ compare_at_price | money }}
            {% endif %}
          </s>
        </span>
      {%- endunless -%}
      <span class="visually-hidden visually-hidden--inline">{{ 'products.product.price.sale_price' | t }}</span>
      <span class="price-item price-item--sale price-item--last">
        {{ money_price }}
      </span>
    </div>
    <small class="unit-price caption{% if product.selected_or_first_available_variant.unit_price_measurement == nil %} hidden{% endif %}">
      <span class="visually-hidden">{{ 'products.product.price.unit_price' | t }}</span>
      <span class="price-item price-item--last">
        <span>{{- product.selected_or_first_available_variant.unit_price | money -}}</span>
        <span aria-hidden="true">/</span>
        <span class="visually-hidden">&nbsp;{{ 'accessibility.unit_price_separator' | t }}&nbsp;</span>
        <span>
          {%- if product.selected_or_first_available_variant.unit_price_measurement.reference_value != 1 -%}
            {{- product.selected_or_first_available_variant.unit_price_measurement.reference_value -}}
          {%- endif -%}
          {{ product.selected_or_first_available_variant.unit_price_measurement.reference_unit }}
        </span>
      </span>
    </small>
  </div>
  {%- if show_badges -%}
    <span class="badge price__badge-sale color-{{ settings.sale_badge_color_scheme }}">
      {{ 'products.product.on_sale' | t }}
    </span>

    <span class="badge price__badge-sold-out color-{{ settings.sold_out_badge_color_scheme }}">
      {{ 'products.product.sold_out' | t }}
    </span>
  {%- endif -%}
  {% else %}
  <div class="price__container">
{% unless customer %}
    <div class="price__regular">
      <div class="quote-form-container">
        <input type="hidden" name="id" class="variant-id" value="{% if product.selected_or_first_available_variant %}{{ product.selected_or_first_available_variant.id }}{% elsif target %}{{ target.id }}{% else %}{{ product.variants.first.id }}{% endif %}">
        <div class="quote-quantity-selector" style="margin-bottom: 12px;">
  <label for="Quote-Quantity-{{ product.id }}" class="quantity__label form__label" style="display:block;margin-bottom:6px;font-size:1em;color:#666;font-weight:400;">Quantity</label>
  <div class="price-per-item__container">
    <button type="button" class="quantity__button" onclick="var i=this.parentNode.querySelector('input');if(i.value>1)i.stepDown();">-</button>
    <input
      class="quantity__input"
      type="number"
      name="quantity"
      id="Quote-Quantity-{{ product.id }}"
      min="1"
      value="1"
      style="width:40px;text-align:center;border:none;background:transparent;font-size:1.1em;color:#222;outline:none;margin:0 8px;padding:8px 0;height:40px;line-height:40px;appearance:textfield;"
      aria-label="Quantity"
    >
    <button type="button" class="quantity__button" onclick="var i=this.parentNode.querySelector('input');i.stepUp();">+</button>
  </div>
</div>
        <button 
          type="button"
          class="button button--primary add-to-quote-button"
          onclick="addToQuote(this)"
        >
          Add to quote
        </button>
      </div>
    </div>
    {% endunless %}

  <script>
    // Create toast element if it doesn't exist
    if (!document.getElementById('quoteToast')) {
      const toast = document.createElement('div');
      toast.id = 'quoteToast';
      toast.className = 'quote-toast';
      document.body.appendChild(toast);
    }
    
    function addToQuote(button) {
      // Get container and elements
      const container = button.closest('.quote-form-container');
      const variantId = container.querySelector('.variant-id').value;
      // Always get the current value from the visible quantity input
      const qtyInput = container.querySelector('input[name="quantity"]');
      const quantity = qtyInput ? qtyInput.value : 1;
      
      // Add loading state
      button.classList.add('loading');
      button.disabled = true;
      
      // Use Shopify AJAX API to add item to cart
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: parseInt(quantity, 10)
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Get product title
        const productTitle = data.product_title || 'Product';
        
        // Show toast notification
        const toast = document.getElementById('quoteToast');
        toast.textContent = `${productTitle} added to quote`;
        toast.classList.add('show');
        
        // Reset button state
        button.classList.remove('loading');
        button.disabled = false;
        
        // Hide toast after delay
        setTimeout(() => {
          toast.classList.remove('show');
        }, 3000);
      })
      .catch(error => {
        console.error('Error adding item to cart:', error);
        
        // Reset button state
        button.classList.remove('loading');
        button.disabled = false;
        
        // Show error toast
        const toast = document.getElementById('quoteToast');
        toast.textContent = 'Could not add item to quote';
        toast.classList.add('show', 'error');
        
        setTimeout(() => {
          toast.classList.remove('show', 'error');
        }, 3000);
      });
    }
  </script>
  
  <style>
    .quote-form-container {
      margin: 0;
    }
    
    .quote-toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #8F9A5A;
      color: white;
      padding: 12px 16px;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
      z-index: 9999;
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 0.3s, transform 0.3s;
      pointer-events: none;
      font-size: 14px;
      font-weight: 500;
      min-width: 200px;
      text-align: center;
    }
    
    .quote-toast.show {
      opacity: 1;
      transform: translateY(0);
      background-color: #8F9A5A;
    }
    
    .quote-toast.error {
      background-color: #D8000C;
    }
    
    .add-to-quote-button {
  background: #fff !important;
  color: #8F9A5A !important;
  border: 2px solid #8F9A5A !important;
  border-radius: 8px !important;
  box-shadow: none !important;
  transition: background 0.2s, color 0.2s, border 0.2s;
  min-height: 48px !important;
  padding: 0 24px !important;
  font-size: 1.1em !important;
  font-weight: 500 !important;
  letter-spacing: 0.04em !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  width: 100% !important;
  outline: none !important;
  box-shadow: none !important;
  --color-button: initial !important;
  --color-button-text: initial !important;
  --color-secondary-button: initial !important;
  --color-secondary-button-text: initial !important;
  --buttons-border-width: 0 !important;
  --buttons-radius-outset: 0 !important;
  --buttons-border-offset: 0 !important;
  --alpha-button-border: 0 !important;
  --border-radius: 8px !important;
  --border-width: 2px !important;
  --border-opacity: 1 !important;
  --color-foreground: initial !important;
  --color-background: initial !important;
}
.add-to-quote-button::before,
.add-to-quote-button::after {
  display: none !important;
  content: none !important;
}

.add-to-quote-button:hover {
  background: #8F9A5A !important;
  color: #fff !important;
  border-color: #8F9A5A !important;
}

    .add-to-quote-button.loading {
      color: transparent;
    }
    .add-to-quote-button.loading::after {
      content: '';
      position: absolute;
      left: calc(50% - 10px);
      top: calc(50% - 10px);
      width: 20px;
      height: 20px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 0.8s infinite linear;
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    .quote-toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #4CAF50;
      color: white;
      padding: 16px;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
      display: none;
      z-index: 1000;
      opacity: 0;
      transition: opacity 0.3s;
    }
    
    .quote-toast.show {
      display: block;
      opacity: 1;
    }
  </style>
  


  {% endif %}
