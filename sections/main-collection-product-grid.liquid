{% render 'rapid-search-results-template' %}
{% render 'rapid-search-results-template-v2' %}
{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- unless section.settings.quick_add == 'none' -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
{%- endunless -%}

{%- if section.settings.quick_add == 'standard' -%}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- if section.settings.quick_add == 'bulk' -%}
  <script src="{{ 'quick-add-bulk.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quick-order-list.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'price-per-item.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<!-- Card product quantity selector and add to cart functionality -->
<script src="{{ 'card-quantity.js' | asset_url }}" defer="defer"></script>

{%- style -%}
  /* Mobile Categories Drawer Styles */
  .categories-toggle-btn {
    display: none;
    background: transparent;
    color: #111;
    border: none;
    border-radius: 0;
    padding: 0 0 18px 0;
    font-size: 1.7rem !important;
    font-weight: 300 !important;
    font-family: inherit !important;
    letter-spacing: 0.01em !important;
    margin-bottom: 0;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    box-shadow: none;
    outline: none;
    transition: color 0.2s;
    line-height: 1.3;
  }
  .categories-toggle-btn svg {
    vertical-align: middle;
    margin-right: 6px;
    color: #111;
    width: 1.15em;
    height: 1.15em;
    display: inline-block;
  }
  @media (max-width: 989px) {
    .categories-toggle-btn {
      display: flex;
      background: transparent;
      color: #111;
      border: none;
      border-radius: 0;
      padding: 0 0 18px 0;
      font-size: 1.08rem;
      font-weight: 700;
      margin-bottom: 0;
      box-shadow: none;
    }
    .categories-sidebar {
      display: none;
    }
    .categories-drawer {
      display: block;
      position: fixed;
      top: 0;
      left: 0;
      width: 80vw;
      max-width: 340px;
      height: 100vh;
      background: #fff;
      box-shadow: 2px 0 16px rgba(0,0,0,0.18);
      z-index: 9999;
      transform: translateX(-100%);
      transition: transform 0.3s cubic-bezier(.7,0,.3,1);
      overflow-y: auto;
      border-radius: 0 12px 12px 0;
      padding-left: 18px;
    }
    .categories-drawer-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 18px 12px 6px 0;
      font-size: 1.08rem;
      font-weight: 700;
      border-bottom: none;
      background: none;
      color: #111;
    }
    .categories-list {
      padding-left: 8px;
    }
    .categories-drawer-close {
      background: none;
      border: none;
      font-size: 2rem;
      color: #8F9A5B;
      cursor: pointer;
      margin-left: 8px;
      line-height: 1;
    }
    .categories-drawer-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9998;
    }
    body.show-categories-drawer .categories-drawer {
      transform: translateX(0);
    }
    body.show-categories-drawer .categories-drawer-overlay {
      display: block;
    }
    body.show-categories-drawer {
      overflow: hidden;
    }
  }

  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  
  /* Collection Banner - Rebuilt */
  .collection-banner {
    width: 100%;
    margin-bottom: 2rem;
    border-radius: 8px;
    padding: 2rem;
    position: relative;
  }
  
  .collection-banner__content {
    position: relative;
    z-index: 2;
  }
  
  .collection-banner__heading {
    margin-top: 0;
    margin-bottom: 0.8rem;
    font-size: 24px;
    font-weight: 600;
  }
  
  .collection-banner__text {
    font-size: 16px;
    max-width: 60%;
    line-height: 1.5;
  }
  
  /* Categories sidebar styles */
  .collection-layout {
    display: flex;
    flex-direction: column;
  }
  
  @media screen and (min-width: 990px) {
    .collection-layout {
      flex-direction: row;
    }
  }
  
  .categories-sidebar {
    width: 100%;
    padding-right: 20px;
    margin-bottom: 30px;
  }
  
  @media screen and (min-width: 990px) {
    .categories-sidebar {
      width: 240px;
      min-width: 240px;
      margin-bottom: 0;
    }
    
    .collection-container {
      flex-grow: 1;
      width: calc(100% - 240px);
    }
  }
  
  .categories-heading {
    font-size: 16px;
    font-weight: 600;
    margin-top: 0;
    margin-bottom: 20px;
    text-transform: uppercase;
    padding-bottom: 10px;
    border-bottom: 1px solid #e8e8e8;
  }
  
  .categories-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .categories-list li {
    margin-bottom: 12px;
  }
  
  .categories-list a {
    color: rgba(var(--color-foreground), 0.75);
    text-decoration: none;
    font-size: 14px;
    line-height: 1.5;
    display: block;
  }
  
  .categories-list a:hover {
    color: rgb(var(--color-foreground));
    text-decoration: underline;
  }

  .categories-list a.active {
    background-color: #e9e9e9; /* Light gray background for the 'box' */
    color: rgb(var(--color-foreground)); /* Ensure text color contrasts well */
    font-weight: 600; /* Make text slightly bolder */
    padding: 6px 12px; /* Add padding inside the box */
    border-radius: 4px; /* Rounded corners for the box */
    display: block; /* Make the anchor a block for proper padding and background */
    text-decoration: none; /* Remove underline for active state */
    border: 1px solid #d0d0d0; /* Subtle border for the box */
  }
  
  .categories-list li {
    margin-bottom: 14px;
  }
  
  .categories-list a {
    font-size: 14px;
    color: rgba(var(--color-foreground), 0.85);
    line-height: 1.5;
    font-weight: 600; /* Make all category links bold by default */
  }

  .categories-list > li > span.category-heading {
    display: block;
    padding: 6px 0; 
    font-weight: 600;
    color: rgba(var(--color-foreground), 0.95);
    margin-bottom: 8px; 
    font-size: 14px; 
    line-height: 1.5; 
  }

  .categories-list .sub-categories-list {
    padding-left: 20px; 
    list-style: none; 
    margin-top: 8px;
  }

  .categories-list .sub-categories-list li {
    margin-bottom: 10px; 
  }

  .categories-list .sub-categories-list li a {
    font-weight: normal; /* Sub-category links normal weight */
  }

  /* Ensure active sub-category links re-apply bold from the .active class */
  .categories-list .sub-categories-list li a.active {
    font-weight: 600;
  }
{%- endstyle -%}

<div class="section-{{ section.id }}-padding gradient color-{{ section.settings.color_scheme }}">
  {%- paginate collection.products by section.settings.products_per_page -%}
    <div class="page-width collection-layout">
      <!-- Mobile Categories Toggle Button -->
      <button class="categories-toggle-btn" aria-label="Show categories" type="button" onclick="document.body.classList.add('show-categories-drawer')">
        <svg width="22" height="22" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="6" width="18" height="2" rx="1"/><rect x="3" y="11" width="18" height="2" rx="1"/><rect x="3" y="16" width="18" height="2" rx="1"/></svg>
        Categories
      </button>
      <!-- Categories Sidebar as Drawer -->
      <div class="categories-sidebar categories-drawer">
        <div class="categories-drawer-header">
          <span>CATEGORIES</span>
          <button class="categories-drawer-close" aria-label="Close categories" type="button" onclick="document.body.classList.remove('show-categories-drawer')">&times;</button>
        </div>
        <ul class="categories-list">
            <li>
              <a href="/collections/all" {% if collection.handle == 'all' %}class="active"{% endif %}>All Products</a>
            </li>
            <li>
              <span class="category-heading">Insecticides</span>
              <ul class="sub-categories-list">
                <li><a href="/collections/ec" {% if collection.handle == 'ec' %}class="active"{% endif %}>EC</a></li>
                <li><a href="/collections/mc" {% if collection.handle == 'mc' %}class="active"{% endif %}>MC</a></li>
                <li><a href="/collections/sc" {% if collection.handle == 'sc' %}class="active"{% endif %}>SC</a></li>
                <li><a href="/collections/ew" {% if collection.handle == 'ew' %}class="active"{% endif %}>EW</a></li>
                <li><a href="/collections/green-products" {% if collection.handle == 'green-products' %}class="active"{% endif %}>Green Products</a></li>
                <li><a href="/collections/gel-baits" {% if collection.handle == 'gel-baits' %}class="active"{% endif %}>Gel & Baits</a></li>
                <li><a href="/collections/cockroaches" {% if collection.handle == 'cockroaches' %}class="active"{% endif %}>Cockroaches</a></li>
                <li><a href="/collections/rodents" {% if collection.handle == 'rodents' %}class="active"{% endif %}>Rodents</a></li>
                <li><a href="/collections/bedbugs" {% if collection.handle == 'bedbugs' %}class="active"{% endif %}>Bedbugs</a></li>
                <li><a href="/collections/ants" {% if collection.handle == 'ants' %}class="active"{% endif %}>Ants</a></li>
                <li><a href="/collections/flies" {% if collection.handle == 'flies' %}class="active"{% endif %}>Flies</a></li>
                <li><a href="/collections/mosquitoes" {% if collection.handle == 'mosquitoes' %}class="active"{% endif %}>Mosquitoes</a></li>
                <li><a href="/collections/termite" {% if collection.handle == 'termite' %}class="active"{% endif %}>Termite</a></li>
                <li><a href="/collections/snakes" {% if collection.handle == 'snakes' %}class="active"{% endif %}>Snakes</a></li>
                <li><a href="/collections/birds" {% if collection.handle == 'birds' %}class="active"{% endif %}>Birds</a></li>
                <li><a href="/collections/stored-product-pest" {% if collection.handle == 'stored-product-pest' %}class="active"{% endif %}>Stored Product Pest</a></li>
                <li><a href="/collections/slugs-snails" {% if collection.handle == 'slugs-snails' %}class="active"{% endif %}>Slugs & Snails</a></li>
                <li><a href="/collections/wasp-hornets" {% if collection.handle == 'wasp-hornets' %}class="active"{% endif %}>Wasp & Hornets</a></li>
              </ul>
            </li>
            <li>
              <a href="/collections/glue-traps" {% if collection.handle == 'glue-traps' %}class="active"{% endif %}>Glue & Traps</a>
            </li>
            <li>
              <a href="/collections/equipments" {% if collection.handle == 'equipments' %}class="active"{% endif %}>Equipments</a>
            </li>
            <li>
              <a href="/collections/spare-parts" {% if collection.handle == 'spare-parts' %}class="active"{% endif %}>Spare Parts</a>
            </li>
            <li>
              <a href="/collections/ilt-units-consumables" {% if collection.handle == 'ilt-units-consumables' %}class="active"{% endif %}>ILT Units & Consumables</a>
            </li>
            <li>
              <a href="/collections/stray-animals" {% if collection.handle == 'stray-animals' %}class="active"{% endif %}>Stray Animals</a>
            </li>
          </ul>
      </div>
      
      <!-- Overlay for Drawer -->
      <div class="categories-drawer-overlay" onclick="document.body.classList.remove('show-categories-drawer')"></div>
      
      <!-- Collection Products Container -->
      <div class="collection-container">
        {% if section.settings.show_collection_banner %}
          <div class="collection-banner" 
               style="min-height: {{ section.settings.banner_height }}px; 
                      {% if section.settings.banner_image != blank %}
                        background-image: url({{ section.settings.banner_image | image_url: width: 1500 }}); 
                        background-size: cover; 
                        background-position: center;
                      {% else %}
                        background-color: {{ section.settings.banner_background_color }};
                      {% endif %}
                      color: {{ section.settings.banner_text_color }};">
            <div class="collection-banner__content">
              {% if section.settings.banner_heading != blank %}
                <h2 class="collection-banner__heading" style="color: {{ section.settings.banner_text_color }};">{{ section.settings.banner_heading }}</h2>
              {% endif %}
              {% if section.settings.banner_text != blank %}
                <div class="collection-banner__text" style="color: {{ section.settings.banner_text_color }};">{{ section.settings.banner_text }}</div>
              {% endif %}
            </div>
          </div>
        {% endif %}
        {% comment %} Sort is the first tabbable element when filter type is vertical {% endcomment %}
    {%- if section.settings.enable_sorting and section.settings.filter_type == 'vertical' -%}
      <facet-filters-form class="facets facets-vertical-sort page-width small-hide">
        <form class="facets-vertical-form" id="FacetSortForm">
          <div class="facet-filters sorting caption">
            <div class="facet-filters__field">
              <h2 class="facet-filters__label caption-large text-body">
                <label for="SortBy">{{ 'products.facets.sort_by_label' | t }}</label>
              </h2>
              <div class="select">
                {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
                <select
                  name="sort_by"
                  class="facet-filters__sort select__select caption-large"
                  id="SortBy"
                  aria-describedby="a11y-refresh-page-message"
                >
                  {%- for option in collection.sort_options -%}
                    <option
                      value="{{ option.value | escape }}"
                      {% if option.value == sort_by %}
                        selected="selected"
                      {% endif %}
                    >
                      {{ option.name | escape }}
                    </option>
                  {%- endfor -%}
                </select>
                {% render 'icon-caret' %}
              </div>
            </div>
          </div>

          <div class="product-count-vertical light" role="status">
            <h2 class="product-count__text text-body">
              <span id="ProductCountDesktop">
                {%- if collection.results_count -%}
                  {{
                    'templates.search.results_with_count'
                    | t: terms: collection.terms, count: collection.results_count
                  }}
                {%- elsif collection.products_count == collection.all_products_count -%}
                  {{ 'products.facets.product_count_simple' | t: count: collection.products_count }}
                {%- else -%}
                  {{
                    'products.facets.product_count'
                    | t: product_count: collection.products_count, count: collection.all_products_count
                  }}
                {%- endif -%}
              </span>
            </h2>
            {%- render 'loading-spinner' -%}
          </div>
        </form>
      </facet-filters-form>
    {%- endif -%}

    <div class="{% if section.settings.filter_type == 'vertical' %} facets-vertical page-width{% endif %}">
      {{ 'component-facets.css' | asset_url | stylesheet_tag }}
      <script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>
      {%- if section.settings.enable_filtering or section.settings.enable_sorting -%}
        <aside
          aria-labelledby="verticalTitle"
          class="facets-wrapper{% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          id="main-collection-filters"
          data-id="{{ section.id }}"
        >
          {% render 'facets',
            results: collection,
            enable_filtering: section.settings.enable_filtering,
            enable_sorting: section.settings.enable_sorting,
            filter_type: section.settings.filter_type,
            paginate: paginate
          %}
        </aside>
      {%- endif -%}
      
      <!-- Collection Title -->
      <div class="collection-title-wrapper" style="margin: 20px 0;">
        <h1 class="collection-title" style="margin: 20px 0 20px 15px; font-size: 28px; font-weight: 600; color: #333333;">
          {{ collection.title }}
        </h1>
      </div>

      <div
        class="product-grid-container{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
        id="ProductGridContainer"
        {% if settings.animations_reveal_on_scroll %}
          data-cascade
        {% endif %}
      >
        {%- if collection.products.size == 0 -%}
          <div class="collection collection--empty page-width" id="product-grid" data-id="{{ section.id }}">
            <div class="loading-overlay gradient"></div>
            <div class="title-wrapper center">
              <h2 class="title title--primary">
                {{ 'sections.collection_template.empty' | t -}}
                <br>
                {{
                  'sections.collection_template.use_fewer_filters_html'
                  | t: link: collection.url, class: 'underlined-link link'
                }}
              </h2>
            </div>
          </div>
        {%- else -%}
          <div
            class="collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          >
            <div class="loading-overlay gradient"></div>
            <ul
              id="product-grid"
              data-id="{{ section.id }}"
              data-next-url="{{ paginate.next.url | default: '' }}" {# Add next URL for infinite scroll #}
              class="
                grid product-grid grid--{{ section.settings.columns_mobile }}-col-tablet-down
                grid--{{ section.settings.columns_desktop }}-col-desktop
                {% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %}
              "
            >
              {%- for product in collection.products -%}
                {% assign lazy_load = false %}
                {%- if forloop.index > 2 -%}
                  {%- assign lazy_load = true -%}
                {%- endif -%}
                <li
                  class="grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                  {% if settings.animations_reveal_on_scroll %}
                    data-cascade
                    style="--animation-order: {{ forloop.index }};"
                  {% endif %}
                >
                  {% render 'card-product',
                    card_product: product,
                    media_aspect_ratio: section.settings.image_ratio,
                    image_shape: section.settings.image_shape,
                    show_secondary_image: section.settings.show_secondary_image,
                    show_vendor: section.settings.show_vendor,
                    show_rating: section.settings.show_rating,
                    lazy_load: lazy_load,
                    quick_add: section.settings.quick_add,
                    section_id: section.id
                  %}
                </li>
              {%- endfor -%}
            </ul>

            
          </div>
        {%- endif -%}
      </div>
    </div>
    <!-- End Collection Container -->
    </div>
    <!-- End Collection Layout -->
    {% render 'quick-view-modal' %}
  {%- endpaginate -%}
  {% if section.settings.image_shape == 'arch' %}
    {% render 'mask-arch' %}
  {%- endif -%}
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const productGrid = document.getElementById('product-grid');
  if (!productGrid) return;

  let nextUrl = productGrid.dataset.nextUrl || '';
  let isLoading = false;
  const scrollOffset = 300; // Pixels from bottom to trigger load

  if (!nextUrl) {
    // console.log('Infinite scroll: No initial next URL.');
    return;
  }

  function loadMoreProducts() {
    if (isLoading || !nextUrl) return;
    isLoading = true;

    // Loading indicator removed as per user request

    fetch(nextUrl)
      .then(response => response.text())
      .then(text => {
        const parser = new DOMParser();
        const htmlDocument = parser.parseFromString(text, 'text/html');
        const newGrid = htmlDocument.getElementById('product-grid');
        
        if (newGrid) {
          const newProducts = newGrid.querySelectorAll(':scope > li:not(#infinite-scroll-loading-indicator)');
          if (newProducts.length > 0) {
            newProducts.forEach(product => {
              productGrid.appendChild(product); 
            });
          }
          nextUrl = newGrid.dataset.nextUrl || '';
          productGrid.dataset.nextUrl = nextUrl; // Update current grid's data attribute
        } else {
          nextUrl = ''; // No new grid found, assume end of products
        }
        
        if (!nextUrl) {
          window.removeEventListener('scroll', scrollHandler);
          // console.log('Infinite scroll: No more pages.');
        }
      })
      .catch(error => {
        console.error('Infinite scroll error:', error);
      })
      .finally(() => {
        // Loading indicator removal logic removed as indicator is no longer added
        isLoading = false;
      });
  }

  function scrollHandler() {
    const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
    if (scrollTop + clientHeight >= scrollHeight - scrollOffset) {
      loadMoreProducts();
    }
  }

  window.addEventListener('scroll', scrollHandler, { passive: true });

  // Initial check in case the page isn't scrollable yet but has more items
  setTimeout(() => {
    if (nextUrl && (document.documentElement.scrollHeight <= document.documentElement.clientHeight)) {
      // console.log('Infinite scroll: Initial content too short, loading more.');
      loadMoreProducts();
    }
  }, 500);
});
</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    console.log('QuickView Script: DOMContentLoaded');
  const quickViewModal = document.getElementById('quickViewModal');
  if (!quickViewModal) {
    console.error('QuickView Error: Modal element #quickViewModal not found.');
    return;
  }
  console.log('QuickView: Modal element #quickViewModal found:', quickViewModal);

  const quickViewImage = document.getElementById('quickViewImage');
  const quickViewTitle = document.getElementById('quickViewModalTitle');
  const quickViewPrice = document.getElementById('quickViewPrice');
  const quickViewDescription = document.getElementById('quickViewDescription');
  const quickViewDetailsLink = document.getElementById('quickViewDetailsLink');
  const isCustomerLoggedIn = {{ customer | json }};
  const moneyFormatString = {{ shop.money_format | json }};
  console.log('QuickView: moneyFormatString initialized. Value:', moneyFormatString, 'Type:', typeof moneyFormatString);

  function formatShopifyMoney(cents, formatString) {
    const numericCents = typeof cents === 'string' ? parseInt(cents.replace(/[^0-9]/g, ''), 10) : cents;

    if (typeof numericCents !== 'number' || isNaN(numericCents)) {
      console.error('QuickView: Invalid cents value for formatting:', cents);
      return ''; 
    }

    if (typeof formatString !== 'string' || formatString.trim() === '') {
      // Fallback basic formatting if formatString is invalid
      const fallbackAmount = (numericCents / 100).toFixed(2);
      console.warn('QuickView: Invalid or empty moneyFormatString. Using fallback formatting:', fallbackAmount);
      return fallbackAmount; 
    }

    function getFormattedValue(target, amountInCents) {
      const amount = amountInCents / 100;
      switch (target) {
        case 'amount':
          return amount.toFixed(2);
        case 'amount_no_decimals':
          return amount.toFixed(0);
        case 'amount_with_comma_separator':
          // Standard toLocaleString should handle comma separation based on locale.
          // Forcing a specific style like en-US if needed, or relying on browser default.
          return amount.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2 });
        case 'amount_no_decimals_with_comma_separator':
          return amount.toLocaleString(undefined, {minimumFractionDigits: 0, maximumFractionDigits: 0 });
        // Shopify might have other formats like amount_with_apostrophe_separator etc.
        // Add more cases here if other Shopify money formats are used in your theme
        default:
          // If the placeholder is unknown, return it as is to avoid breaking the string,
          // or return a default formatting. For now, log a warning and use default.
          console.warn('QuickView: Unknown money format placeholder:', target);
          return amount.toFixed(2);
      }
    }

    const placeholderRegex = /\{\{\s*([\w]+)\s*\}\}/g;
    let result = formatString;
    let match;
    let placeholderFound = false;

    // Replace all occurrences of {{placeholder}} in the format string
    while ((match = placeholderRegex.exec(formatString)) !== null) {
      placeholderFound = true;
      const fullPlaceholder = match[0]; // Full match, e.g., "{{amount}}"
      const placeholderKey = match[1];    // Captured group, e.g., "amount"
      const formattedValue = getFormattedValue(placeholderKey, numericCents);
      result = result.replace(fullPlaceholder, formattedValue);
    }

    if (!placeholderFound) {
        // If the formatString was valid but contained no recognizable {{amount}} style placeholders
        // (e.g. it was just 'USD' or some other static text by mistake), return it or a default.
        // For safety, return the formatted amount directly if no placeholders were processed.
        console.warn('QuickView: No Shopify money placeholders found in formatString. Using default formatting for value:', formatString);
        return (numericCents / 100).toFixed(2);
    }
    return result;
  }

  function getResizedShopifyImage(src, size) { // size like '600x600'
    if (!src || !size) return src;
    try {
      const versionMarker = '?v=';
      const versionIndex = src.lastIndexOf(versionMarker);
      let baseUrl = src;
      let versionQuery = '';

      if (versionIndex !== -1) {
        baseUrl = src.substring(0, versionIndex);
        versionQuery = src.substring(versionIndex);
      }

      const extensionIndex = baseUrl.lastIndexOf('.');
      if (extensionIndex === -1) {
        console.warn('QuickView: Could not find extension in image src for resizing:', src);
        return src; // No extension found, return original
      }

      const filename = baseUrl.substring(0, extensionIndex);
      const extension = baseUrl.substring(extensionIndex);

      return `${filename}_${size}${extension}${versionQuery}`;
    } catch (e) {
      console.error('QuickView: Error resizing image URL:', e, 'Original src:', src);
      return src; // Fallback to original src if error
    }
  }


  function openQuickView(productHandle) {
    console.log('QuickView: Entered openQuickView. moneyFormatString value:', moneyFormatString, 'Type:', typeof moneyFormatString);
    console.log('QuickView: openQuickView called with handle:', productHandle);
    if (!productHandle) return;

    fetch(`/products/${productHandle}.js`)
      .then(response => response.json())
      .then(product => {
        quickViewTitle.textContent = product.title;
        
        if (quickViewImage) {
        quickViewImage.classList.remove('is-loaded'); // Reset for new image
          quickViewImage.src = product.featured_image ? getResizedShopifyImage(product.featured_image, '600x600') : ''; // Use client-side helper for size
          quickViewImage.alt = product.title || 'Product image';

        quickViewImage.onload = () => {
          quickViewImage.classList.add('is-loaded');
        };
        // If image is already cached and complete, trigger loaded state directly
        if (quickViewImage.complete) {
          quickViewImage.classList.add('is-loaded');
        }
        }

        if (isCustomerLoggedIn && product.price) {
          console.log('QuickView: Inside fetch.then, before using moneyFormatString. Value:', moneyFormatString, 'Type:', typeof moneyFormatString);
          quickViewPrice.innerHTML = `<span class="price-item price-item--regular">${formatShopifyMoney(product.price, moneyFormatString)}</span>`;
        } else if (!isCustomerLoggedIn) {
          quickViewPrice.innerHTML = ''; // Clear previous price
          const loginPrompt = document.createElement('span');
          loginPrompt.textContent = '{{ 'products.product.login_to_see_price' | t: default: "Log in to see price" }}';
          quickViewPrice.appendChild(loginPrompt);
        } else {
          quickViewPrice.innerHTML = ''; // E.g. logged in but no price / price is 0
        }

        if (quickViewDescription) {
          let descriptionText = product.description;
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = descriptionText;
          descriptionText = tempDiv.textContent || tempDiv.innerText || ""; // Strip HTML
          quickViewDescription.textContent = descriptionText.substring(0, 250) + (descriptionText.length > 250 ? '...' : ''); // Truncate
        }
        
        if (quickViewDetailsLink) {
          quickViewDetailsLink.href = product.url;
        }

        console.log('QuickView: Product data fetched, attempting to show modal.');
        quickViewModal.classList.add('is-active');
        document.body.classList.add('quickview-modal-open'); // Prevent background scroll

        // Debugging overlay
        const overlayEl = quickViewModal.querySelector('.quick-view-modal__overlay');
        console.log('QuickView: Overlay element:', overlayEl);
        if (overlayEl) {
          const computedOverlayStyles = window.getComputedStyle(overlayEl);
          console.log('QuickView: Overlay computed - display:', computedOverlayStyles.display);
          console.log('QuickView: Overlay computed - backgroundColor:', computedOverlayStyles.backgroundColor);
          console.log('QuickView: Overlay computed - opacity:', computedOverlayStyles.opacity);
          console.log('QuickView: Overlay computed - zIndex:', computedOverlayStyles.zIndex);
        }
        const computedModalStyles = window.getComputedStyle(quickViewModal);
        console.log('QuickView: Modal container computed - display:', computedModalStyles.display);
        console.log('QuickView: Modal container computed - zIndex:', computedModalStyles.zIndex);
      })
      .catch(error => {
        console.error('Error fetching product data for quick view:', error);
      });
  }

  function closeQuickView() {
    console.log('QuickView: closeQuickView called.');
    quickViewModal.classList.remove('is-active');
    document.body.classList.remove('quickview-modal-open'); // Restore background scroll
  }

  const productGridContainer = document.getElementById('product-grid');
  console.log('QuickView: productGridContainer found:', productGridContainer);
  if (productGridContainer) {
    console.log('QuickView: productGridContainer is valid, attempting to add click listener.');
    productGridContainer.addEventListener('click', (event) => {
      console.log('QuickView: Click detected on productGridContainer. Event target:', event.target);
      const quickViewButton = event.target.closest('.quick-view-btn');
      console.log('QuickView: Attempting to find .quick-view-btn. Found:', quickViewButton);
      if (quickViewButton) {
        console.log('QuickView: .quick-view-btn found successfully.');
        event.preventDefault();
        event.stopPropagation();
        const productHandle = quickViewButton.dataset.productHandle;
        if (productHandle) {
          console.log('QuickView: productHandle found:', productHandle);
          openQuickView(productHandle);
        } else {
          console.log('QuickView: productHandle NOT found on the button.');
        }
      } else {
        console.log('QuickView: .quick-view-btn NOT found by event.target.closest(). Click was on:', event.target);
      }
    });
  }

  quickViewModal.addEventListener('click', (event) => {
    if (event.target.closest('[data-quick-view-close]')) { // Use .closest() to handle clicks on child elements of the button
      closeQuickView();
    }
  });

  // Close modal on ESC key press
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && quickViewModal.classList.contains('is-active')) {
      closeQuickView();
    }
  });
});
</script>

{% render 'added-to-cart-modal' %}
{% schema %}
{
  "name": "t:sections.main-collection-product-grid.name",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "Collection Communication Banner"
    },
    {
      "type": "checkbox",
      "id": "show_collection_banner",
      "label": "Show communication banner",
      "default": true
    },
    {
      "type": "image_picker",
      "id": "banner_image",
      "label": "Banner background image"
    },
    {
      "type": "color",
      "id": "banner_background_color",
      "label": "Banner background color",
      "default": "#f8f8f8"
    },
    {
      "type": "text",
      "id": "banner_heading",
      "label": "Banner heading",
      "default": "Special Offers"
    },
    {
      "type": "richtext",
      "id": "banner_text",
      "label": "Banner text",
      "default": "<p>Check out our latest pest control solutions and special discounts on selected products.</p>"
    },
    {
      "type": "color",
      "id": "banner_text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "banner_height",
      "min": 100,
      "max": 300,
      "step": 10,
      "unit": "px",
      "label": "Banner height",
      "default": 180
    },
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 36,
      "step": 4,
      "default": 16,
      "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.main-collection-product-grid.settings.columns_desktop.label"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__3.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.main-collection-product-grid.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label",
      "info": "t:sections.all.image_shape.info"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_rating.label",
      "info": "t:sections.main-collection-product-grid.settings.show_rating.info"
    },
    {
      "type": "select",
      "id": "quick_add",
      "default": "none",
      "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
      "info": "t:sections.main-collection-product-grid.settings.quick_add.info",
      "options": [
        {
          "value": "none",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
        },
        {
          "value": "standard",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
        },
        {
          "value": "bulk",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "select",
      "id": "filter_type",
      "options": [
        {
          "value": "horizontal",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__1.label"
        },
        {
          "value": "vertical",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__2.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__3.label"
        }
      ],
      "default": "horizontal",
      "label": "t:sections.main-collection-product-grid.settings.filter_type.label",
      "info": "t:sections.main-collection-product-grid.settings.filter_type.info"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.main-collection-product-grid.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
