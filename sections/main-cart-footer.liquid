{{ 'component-cart.css' | asset_url | stylesheet_tag }}
{{ 'component-totals.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'component-discounts.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  
  /* Loyalty Points & Two-Column Layout */
  .cart-footer__layout-container {
    display: flex !important;
    flex-direction: row !important;
    flex-wrap: nowrap;
    gap: 60px;
    width: 100%;
    align-items: flex-start;
    justify-content: space-between;
    box-sizing: border-box;
    background: none;
    border: none;
    padding: 0;
  }

  .cart-footer__loyalty-column,
  .cart-footer__main-column {
    background: none;
    border: none;
    border-radius: 0;
    box-shadow: none;
    padding: 0;
    min-height: unset;
    box-sizing: border-box;
    max-width: 400px;
  }

  .cart-footer__main-column {
    max-width: 600px;
    margin-top: 0 !important;
  }

  .cart-footer__loyalty-column {
    margin-right: 0;
  }

  .lpo-upload-section {
    border: none;
    background: none;
    border-radius: 0;
    padding: 0;
    margin-top: 0 !important;
  }

  /* Tax note alignment */
  .tax-note.caption-large.rte {
    text-align: left !important;
    display: block;
    width: 100%;
    margin-left: 0;
  }

  .loyalty-points-component {
    border: 1px solid #b8bb8a; /* Muted green border */
    border-radius: 8px;
    padding: 20px;
    background-color: #edf7ed; /* Light green background */
    margin-bottom: 20px; /* Space if stacking on mobile */
  }

  .loyalty-points-component h3 {
    margin-top: 0;
    font-size: 1.4em;
    color: #5a705a; /* Darker shade of the muted green for heading */
  }

  .loyalty-points-component label {
    display: block;
    margin-top: 15px;
    margin-bottom: 5px;
    font-weight: bold;
  }

  .loyalty-points-component select,
  .loyalty-points-component .button {
    width: 100%;
    padding: 10px;
    margin-top: 5px;
  }

  .loyalty-savings-display {
    margin-top: 15px;
    font-weight: bold;
    font-size: 1.1em;
  }

  /*
    Responsive override: Stack loyalty and main columns vertically on mobile.
    This ensures .cart-footer__layout-container switches from row to column layout.
  */
  @media (max-width: 749px) {
    .cart-footer__layout-container {
      flex-direction: column !important;
      width: 100% !important;
      gap: 24px !important;
    }
    .cart-footer__loyalty-column,
    .cart-footer__main-column {
      flex-basis: 100% !important;
      max-width: 100% !important;
    }
  }

  /* LPO upload styling */
  .lpo-upload-section {
    margin: 30px 0;
    border: 1px solid #e8e8e8;
    border-radius: 8px;
    padding: 20px;
    background-color: #f9f9f9;
  }

  {% unless customer %}
    #quote-request {
      background: #000 !important;
      color: #fff !important;
      border: none !important;
    }
    #quote-request:hover {
      background: #222 !important;
      color: #fff !important;
    }
  {% endunless %}
{%- endstyle -%}

<div
  class="gradient color-{{ section.settings.color_scheme }}{% if cart == empty %} is-empty{% endif %}"
  id="main-cart-footer"
  data-id="{{ section.id }}"
>
  <div class="page-width">
    <div class="cart__footer isolate section-{{ section.id }}-padding">
      {%- if settings.show_cart_note -%}
        <cart-note class="cart__note field">
          <label for="Cart-note">{{ 'sections.cart.note' | t }}</label>
          <textarea
            class="text-area field__input"
            name="note"
            form="cart"
            id="Cart-note"
            placeholder="{{ 'sections.cart.note' | t }}"
          >{{ cart.note }}</textarea>
        </cart-note>
      {%- endif -%}

      <div class="cart__blocks cart-footer__layout-container">
        {% if customer and customer.metafields.loyalty.available_points > 0 %}
        <div class="cart-footer__loyalty-column">
          <div class="loyalty-points-component">
            <h3>Redeem Your Loyalty Points</h3>
            <p>You have <strong id="customer-loyalty-points">{{ customer.metafields.loyalty.available_points | default: 0 }}</strong> points.</p>
            
            {%- comment %} --- Loyalty Points Calculation --- {%- endcomment -%}
            {%- assign loyalty_current_points = customer.metafields.loyalty.available_points | default: 0 | times: 1 -%}
            {%- assign loyalty_points_modulo_100 = loyalty_current_points | modulo: 100 -%}
            {%- assign loyalty_max_redeemable = loyalty_current_points | minus: loyalty_points_modulo_100 -%}
            {%- assign loyalty_num_options = loyalty_max_redeemable | divided_by: 100 | floor -%}
            {%- comment %} --- End Loyalty Points Calculation --- {%- endcomment -%}

            {% if loyalty_max_redeemable > 0 %}
              <label for="loyalty-points-to-redeem">Points to redeem:</label>
              <input type="number" name="loyalty_points_to_redeem" id="loyalty-points-to-redeem" class="field__input" step="100" min="0" value="0" data-customer-max-points="{{ loyalty_max_redeemable }}">
              <small id="loyalty-points-error" style="color: red; display: none;">Invalid points amount.</small>

              <div class="loyalty-savings-display">
                Potential Savings: <span id="loyalty-potential-savings">0.00</span> AED
              </div>

              <button type="button" id="apply-loyalty-points" class="button" style="margin-top: 15px;">Apply Points</button>
            {% else %}
              <p>You need at least 100 points to redeem.</p>
            {% endif %}
          </div>
          {%- assign points_earned = cart.total_price | divided_by: 100 | floor -%}
          <p id="points-earned-message" class="points-earned-message" style="margin-top:12px; color:#5a705a; font-size:1em;">
            You will earn <strong>{{ points_earned }}</strong> points with this order!
          </p>
        </div>
        {% endif %}

        <div class="cart-footer__main-column">
        {% for block in section.blocks %}
          {%- case block.type -%}
            {%- when '@app' -%}
              {% render block %}
            {%- when 'subtotal' -%}
              <div class="js-contents" {{ block.shopify_attributes }}>
                <div>
                  {%- if cart.cart_level_discount_applications.size > 0 -%}
                    <ul class="discounts list-unstyled" role="list" aria-label="{{ 'customer.order.discount' | t }}">
                      {%- for discount in cart.cart_level_discount_applications -%}
                        <li class="discounts__discount discounts__discount--position">
                          {%- render 'icon-discount' -%}
                          {{ discount.title }}
                          (-{{ discount.total_allocated_amount | money }})
                        </li>
                      {%- endfor -%}
                    </ul>
                  {%- endif -%}
                </div>
                
                {%- if customer and section.blocks.size > 0 -%}
                <div class="lpo-upload-section">
                  {% render 'lpo-upload' %}
                </div>
                {% endif %}

                {% if customer %}
                <div id="loyalty-checkout-success-message" class="cart-checkout-success-message" style="color: green; text-align: center; margin-bottom: 10px; font-weight: bold; display: none;"></div>
                  <div class="totals">
                  <h2 class="totals__total">{{ 'sections.cart.estimated_total' | t }}</h2>
                  <p class="totals__total-value">{{ cart.total_price | money_with_currency }}</p>
                </div>
                {% endif %}

                {% if customer %}
                <small class="tax-note caption-large rte">
                  {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                    {{ 'sections.cart.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                  {%- elsif cart.taxes_included -%}
                    {{ 'sections.cart.taxes_included_but_shipping_at_checkout' | t }}
                  {%- elsif shop.shipping_policy.body != blank -%}
                    {{ 'sections.cart.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                  {%- else -%}
                    {{ 'sections.cart.taxes_and_shipping_at_checkout' | t }}
                  {%- endif -%}
                </small>
                {% endif %}
              </div>
            {%- else -%}
          <div class="cart__ctas" {{ block.shopify_attributes }}>
                {% if customer %}
                <!-- For logged-in customers: Custom checkout button that calls draft order API -->
                <button
                  type="button"
                  id="custom-checkout"
                  class="cart__checkout-button button"
                  name="custom-checkout"
                  {% if cart == empty %}
                    disabled
                  {% endif %}
                >
                  <span>{{ 'sections.cart.checkout' | t }}</span>
                  <span class="loading-spinner" style="display: none;">
                    <svg class="spinner" viewBox="0 0 50 50">
                      <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="5"></circle>
                    </svg>
                  </span>
                </button>
                {% else %}
                <!-- For non-logged in users: Quote request button -->
                <button
                  type="button"
                  id="quote-request"
                  class="cart__checkout-button button"
                  style="background-color: #8F9A5B;"
                  {% if cart == empty %}
                    disabled
                    aria-disabled="true"
                  {% endif %}
                  onclick="openQuoteForm()"
                >
                  Request Quote
                </button>
                {% endif %}
              </div>
              {%- if additional_checkout_buttons -%}
                <div class="cart__dynamic-checkout-buttons additional-checkout-buttons">
                  {{ content_for_additional_checkout_buttons }}
                </div>
              {%- endif -%}
          {%- endcase -%}
        {% endfor %}

        <div id="cart-errors"></div>
      </div>
      </div>
    </div>
  </div>
</div>

{% unless customer %}
  {% render 'quote-form' %}

  <script>
    function openQuoteForm() {
      // First show the quote popup
      document.getElementById('quote-popup').style.display = 'block';
      
      // Then store cart items in localStorage - safely using Shopify's pre-serialized JSON
      try {
        const cartItems = {{ cart.items | json }};
        localStorage.setItem('quoteItems', JSON.stringify(cartItems));
      } catch(e) {
        console.error('Error storing cart items:', e);
      }
    }
  </script>
{% endunless %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Draft Order API integration
    const customCheckoutBtn = document.getElementById('custom-checkout');
    if (customCheckoutBtn) {
      customCheckoutBtn.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Show loading spinner
        const spinnerEl = customCheckoutBtn.querySelector('.loading-spinner');
        const textEl = customCheckoutBtn.querySelector('span:first-child');
        if (spinnerEl) spinnerEl.style.display = 'inline-block';
        customCheckoutBtn.disabled = true;
        
        // Get loyalty points data if available
        const appliedPoints = parseInt(sessionStorage.getItem('appliedLoyaltyPoints') || '0', 10);
        
        // Get LPO file data if available
        const lpoFileData = sessionStorage.getItem('uploadedLpoFile');
        let lpoFile = null;
        if (lpoFileData) {
          try {
            lpoFile = JSON.parse(lpoFileData);
          } catch (e) {
            console.error('Error parsing LPO file data:', e);
          }
        }
        
        // Create line items with CURRENT quantities from DOM (not static Liquid data)
        const lineItems = [];
        {% for item in cart.items %}
          // Get current quantity from DOM instead of static Liquid data
          const quantityInput{{ forloop.index }} = document.querySelector('input[data-quantity-variant-id="{{ item.variant_id }}"]');
          const currentQuantity{{ forloop.index }} = quantityInput{{ forloop.index }} ? parseInt(quantityInput{{ forloop.index }}.value, 10) : {{ item.quantity }};
          
          lineItems.push({
            variantId: "gid://shopify/ProductVariant/{{ item.variant_id }}",
            productId: "gid://shopify/Product/{{ item.product_id }}",
            nsId: "{{ item.product.metafields.netsuite.ns_id }}",
            quantity: currentQuantity{{ forloop.index }},
            // Add cart price as fallback
            cartPrice: {{ item.final_price | divided_by: 100.0 }}
          });
        {% endfor %}
        
        // Send custom prices as a separate array if available
        const customPrices = window.CUSTOMER_CUSTOM_PRICES && Array.isArray(window.CUSTOMER_CUSTOM_PRICES) 
          ? window.CUSTOMER_CUSTOM_PRICES 
          : [];
        
        // Calculate loyalty points discount if applicable
        let appliedDiscount = null;
        if (appliedPoints > 0) {
          const discountAmount = appliedPoints / 10;
          appliedDiscount = {
            description: `Applied ${appliedPoints} loyalty points`,
            value: discountAmount,
            amount: discountAmount,
            valueType: 'FIXED_AMOUNT',
            title: 'Loyalty Points'
          };
        }
        
        // Calculate points that will be earned with this order
        const customCartTotal = window.CURRENT_CUSTOM_CART_TOTAL || calculateCustomCartTotal();
        let pointsToEarn = 0;
        
        {% if customer and customer.metafields.loyalty.current_tier %}
          // Use the same calculation logic as the loyalty points display
          const loyaltyTierData = "{{ customer.metafields.loyalty.current_tier }}";
          
          // Simple calculation (fallback if API logic isn't available)
          // This should match your loyalty tier rates
          if (loyaltyTierData.includes('Bronze')) {
            pointsToEarn = Math.floor(customCartTotal * 0.05);
          } else if (loyaltyTierData.includes('Silver')) {
            pointsToEarn = Math.floor(customCartTotal * 0.1);
          } else if (loyaltyTierData.includes('Gold')) {
            pointsToEarn = Math.floor(customCartTotal * 0.15);
          } else if (loyaltyTierData.includes('Platinum')) {
            pointsToEarn = Math.floor(customCartTotal * 0.2);
          } else {
            pointsToEarn = Math.floor(customCartTotal * 0.05); // Default to Bronze
          }
        {% else %}
          // Default rate for customers without tier data
          pointsToEarn = Math.floor(customCartTotal * 0.05);
        {% endif %}
        
        console.log('Points to earn with this order:', pointsToEarn);
        
        // Format the data according to ShopifyDraftOrderInput
        const cartData = {
          customerId: "gid://shopify/Customer/{{ customer.id }}",
          lineItems: lineItems,
          customPrices: customPrices,
          email: "{{ customer.email }}",
          note:  appliedPoints,
          appliedDiscount: appliedDiscount,
          pointsToEarn: pointsToEarn, // Points customer will earn from this order
          lpoFile: lpoFile, // Include LPO file if uploaded
          // Store currency code separately for our backend but don't send to Shopify
          currencyCode: "{{ cart.currency.iso_code }}"
        };
    
        
        fetch('https://ecovar-middleware-production.up.railway.app/api/orders/draft', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(cartData)
        })
        .then(response => {
          console.log('Response status:', response.status);
          if (!response.ok) {
            return response.json().then(errorData => {
              console.error('API error details:', errorData);
              throw new Error(`API error: ${JSON.stringify(errorData)}`);
            });
          }
          return response.json();
        })
        .then(data => {
          console.log('Received data:', data);
          // Check both invoice_url and invoiceUrl since the naming could vary
          if (data.invoice_url || data.invoiceUrl || (data.draftOrder && data.draftOrder.invoiceUrl)) {
            const url = data.invoice_url || data.invoiceUrl || (data.draftOrder && data.draftOrder.invoiceUrl);
            // Clear session data after successful checkout
            sessionStorage.removeItem('appliedLoyaltyPoints');
            sessionStorage.removeItem('appliedLoyaltyDiscount');
            sessionStorage.removeItem('uploadedLpoFile');
            
            // Redirect to the Shopify invoice URL
            window.location.href = url;
          } else {
            throw new Error('No invoice URL returned');
          }
        })
        .catch(error => {
          console.error('Error during checkout:', error);
          // Reset button state
          if (spinnerEl) spinnerEl.style.display = 'none';
          if (textEl) textEl.innerHTML = 'Checkout';
          customCheckoutBtn.disabled = false;
          
          // Show error message
          const errorEl = document.getElementById('cart-errors');
          if (errorEl) {
            errorEl.innerHTML = '<div class="cart-error-message" style="color: red; margin-top: 10px;">Something went wrong with checkout. Please try again.</div>';
          } else {
            alert('There was an error processing your order. Please try again.');
          }
        });
      });
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const loyaltyComponent = document.querySelector('.loyalty-points-component');
    if (!loyaltyComponent) return;

    const pointsInput = document.getElementById('loyalty-points-to-redeem');
    const potentialSavingsEl = document.getElementById('loyalty-potential-savings');
    const applyButton = document.getElementById('apply-loyalty-points');
    const pointsErrorEl = document.getElementById('loyalty-points-error');
    const successMessageEl = document.getElementById('loyalty-checkout-success-message');
    const cartTotalValueEl = document.querySelector('.totals__total-value');

    let originalCartTotal = 0;
    let currentAppliedDiscount = 0;
    let customerMaxPointsBalance = 0; // Max points customer actually has
    let effectiveMaxRedeemableInputPoints = 0; // Max points for input field (considering cart total)

    function initializeValues() {
      // Use custom cart total instead of DOM-scraped total
      originalCartTotal = window.CURRENT_CUSTOM_CART_TOTAL || calculateCustomCartTotal();

      customerMaxPointsBalance = parseInt(pointsInput.dataset.customerMaxPoints, 10) || 0;
      
      // Max points whose value doesn't exceed cart total
      const maxPointsBasedOnCart = Math.floor(originalCartTotal * 10);
      // Ensure it's a multiple of 100
      const maxPointsBasedOnCartRounded = maxPointsBasedOnCart - (maxPointsBasedOnCart % 100);

      effectiveMaxRedeemableInputPoints = Math.min(customerMaxPointsBalance, maxPointsBasedOnCartRounded);
      
      pointsInput.max = effectiveMaxRedeemableInputPoints;
      pointsInput.value = 0; // Always default to 0 on load
    }

    function validateAndDisplaySavings() {
      let pointsToRedeem = parseInt(pointsInput.value, 10);
      let errorMessage = '';
      let isValid = true;
      const currentInputMax = parseInt(pointsInput.max, 10) || 0; // Use current input.max for validation

      if (isNaN(pointsToRedeem)) {
        pointsToRedeem = 0;
        errorMessage = 'Please enter a valid number.';
        isValid = false;
      } else if (pointsToRedeem < 0) {
        errorMessage = 'Points cannot be negative.';
        isValid = false;
      } else if (pointsToRedeem > currentInputMax) {
        errorMessage = `You can redeem a maximum of ${currentInputMax} points for this order.`;
        isValid = false;
      } else if (pointsToRedeem % 100 !== 0) {
        errorMessage = 'Points must be in increments of 100.';
        isValid = false;
      }

      if (pointsErrorEl) {
        pointsErrorEl.textContent = errorMessage;
        pointsErrorEl.style.display = errorMessage ? 'block' : 'none';
      }
      
      applyButton.disabled = !isValid || pointsToRedeem === 0;

      const discountAmount = isValid && pointsToRedeem > 0 ? pointsToRedeem / 10 : 0;
      if (potentialSavingsEl) potentialSavingsEl.textContent = discountAmount.toFixed(2);

      // If points are no longer valid or zero, and a discount was previously applied, clear it.
      if ((!isValid || pointsToRedeem === 0) && currentAppliedDiscount > 0) {
        // Re-find elements fresh each time
        const currentSuccessMessageEl = document.getElementById('loyalty-checkout-success-message');
        const currentCartTotalValueEl = document.querySelector('.totals__total-value');
        
        if (currentSuccessMessageEl) currentSuccessMessageEl.style.display = 'none';
        if (currentCartTotalValueEl && originalCartTotal > 0) {
           currentCartTotalValueEl.textContent = originalCartTotal.toFixed(2) + ' AED';
        }
        sessionStorage.removeItem('appliedLoyaltyPoints');
        sessionStorage.removeItem('appliedLoyaltyDiscount');
        currentAppliedDiscount = 0;
      }
      return isValid;
    }

    applyButton.addEventListener('click', function() {
      if (!validateAndDisplaySavings()) return;

      const pointsToRedeem = parseInt(pointsInput.value, 10);
      const potentialDiscount = pointsToRedeem / 10;
      // Ensure discount doesn't exceed original cart total
      const finalDiscountAmount = Math.min(potentialDiscount, originalCartTotal);

      currentAppliedDiscount = finalDiscountAmount;

      sessionStorage.setItem('appliedLoyaltyPoints', pointsToRedeem.toString()); // Store points attempted
      sessionStorage.setItem('appliedLoyaltyDiscount', finalDiscountAmount.toString());

      // Re-find elements fresh each time (in case DOM was replaced)
      const currentSuccessMessageEl = document.getElementById('loyalty-checkout-success-message');
      const currentCartTotalValueEl = document.querySelector('.totals__total-value');

      if (currentSuccessMessageEl) {
        currentSuccessMessageEl.textContent = `You are saving ${finalDiscountAmount.toFixed(2)} AED on this order with points!`;
        currentSuccessMessageEl.style.display = 'block';
        console.log('Loyalty confirmation message displayed after applying points');
      } else {
        console.error('Could not find loyalty success message element');
      }
      
      if (currentCartTotalValueEl) {
        const newTotal = originalCartTotal - finalDiscountAmount;
        currentCartTotalValueEl.textContent = newTotal.toFixed(2) + ' AED';
      }
    });

    function reapplyLoyaltyDiscount() {
      // First update the custom cart total display
      updateCustomCartTotalDisplay();
      
      initializeValues(); // Recalculate original total, max points for input, and prefill
      
      console.log('Reapplying loyalty discount with custom total:', window.CURRENT_CUSTOM_CART_TOTAL);

      const savedPointsStr = sessionStorage.getItem('appliedLoyaltyPoints');
      const savedDiscountStr = sessionStorage.getItem('appliedLoyaltyDiscount');

      if (savedPointsStr && savedDiscountStr) { // Path A: Session data exists
        const savedPointsAttempted = parseInt(savedPointsStr, 10);
        let actualSavedDiscount = parseFloat(savedDiscountStr);
        
        // Re-cap discount against current original cart total
        actualSavedDiscount = Math.min(actualSavedDiscount, originalCartTotal);

        pointsInput.value = savedPointsAttempted; // Set input to what was last attempted
        
                  // Validate the saved points against current rules (max could have changed if cart changed)
          if (validateAndDisplaySavings() && parseInt(pointsInput.value, 10) > 0) { 
              currentAppliedDiscount = actualSavedDiscount;
              
              // Re-find elements in case DOM was replaced
              const currentSuccessMessageEl = document.getElementById('loyalty-checkout-success-message');
              const currentCartTotalValueEl = document.querySelector('.totals__total-value');
              
              if (currentSuccessMessageEl) {
                  currentSuccessMessageEl.textContent = `You are saving ${actualSavedDiscount.toFixed(2)} AED on this order with points!`;
                  currentSuccessMessageEl.style.display = 'block';
                  console.log('Loyalty discount confirmation message restored');
              }
              if (currentCartTotalValueEl) {
                  const newTotal = originalCartTotal - actualSavedDiscount;
                  currentCartTotalValueEl.textContent = newTotal.toFixed(2) + ' AED';
              }
          } else {
            // If saved points are no longer valid, clear session and UI for discount
            sessionStorage.removeItem('appliedLoyaltyPoints');
            sessionStorage.removeItem('appliedLoyaltyDiscount');
            if (successMessageEl) successMessageEl.style.display = 'none';
            if (cartTotalValueEl) cartTotalValueEl.textContent = originalCartTotal.toFixed(2) + ' AED';
            currentAppliedDiscount = 0;
            // pointsInput.value might have been reset by validateAndDisplaySavings if invalid
            // or we might want to reset it to the new effectiveMaxRedeemableInputPoints
            pointsInput.value = effectiveMaxRedeemableInputPoints; // Reset to current max possible
            validateAndDisplaySavings(); // Re-validate with new default value
        }
      } else { // Path B: No session data (initial load usually)
         // Values already initialized by initializeValues()
         validateAndDisplaySavings(); // Updates potential savings, errors, button state based on prefill

         // Explicitly ensure no discount is shown as applied for Path B on initial load
         if (successMessageEl) {
            successMessageEl.style.display = 'none';
         }
         if (cartTotalValueEl && originalCartTotal > 0) {
            cartTotalValueEl.textContent = originalCartTotal.toFixed(2) + ' AED';
         }
         currentAppliedDiscount = 0;
      }
    }
    
    if (pointsInput) {
      pointsInput.addEventListener('input', validateAndDisplaySavings);
    }

    // Calculate custom cart total using custom prices
    function calculateCustomCartTotal() {
      console.log('Calculating custom cart total...');
      
      // Start with Shopify's default total
      let customTotal = {{ cart.total_price | divided_by: 100.0 }};
      
      // Get cart items data and custom prices
      const cartItems = window.CART_ITEM_DATA || [];
      const customPrices = window.CUSTOMER_CUSTOM_PRICES || [];
      
      if (cartItems.length > 0 && customPrices.length > 0) {
        customTotal = 0; // Reset to calculate from scratch
        
        cartItems.forEach(item => {
          if (!item.ns_id) {
            // No NS ID, use original price
            customTotal += item.original_price * (getItemQuantity(item.variant_id) || 1);
            return;
          }
          
          // Look for custom price
          const customPriceData = customPrices.find(p => p.item === item.ns_id);
          const quantity = getItemQuantity(item.variant_id) || 1;
          
          if (customPriceData && customPriceData.price) {
            customTotal += parseFloat(customPriceData.price) * quantity;
            console.log(`Custom price for ${item.ns_id}: ${customPriceData.price} x ${quantity}`);
          } else {
            customTotal += item.original_price * quantity;
            console.log(`Original price for ${item.ns_id}: ${item.original_price} x ${quantity}`);
          }
        });
      }
      
      console.log('Calculated custom total:', customTotal);
      return customTotal;
    }
    
    // Helper function to get current quantity for a variant
    function getItemQuantity(variantId) {
      const quantityInput = document.querySelector(`input[data-quantity-variant-id="${variantId}"]`);
      return quantityInput ? parseInt(quantityInput.value, 10) : 1;
    }
    
    // Update the displayed cart total with custom pricing
    function updateCustomCartTotalDisplay() {
      const totalValueEl = document.querySelector('.totals__total-value');
      if (!totalValueEl) return;
      
      const customTotal = calculateCustomCartTotal();
      window.CURRENT_CUSTOM_CART_TOTAL = customTotal; // Store globally for loyalty calculations
      
      // Update the display (keeping currency formatting consistent)
      totalValueEl.textContent = `${customTotal.toFixed(2)} AED`;
      
      console.log('Updated cart total display to:', customTotal.toFixed(2), 'AED');
    }

    // Function to update points-earned message with API calcu lation
    function updatePointsEarnedMessage() {
      const pointsMessageEl = document.getElementById('points-earned-message');
      if (!pointsMessageEl) return;
      
      // Use custom cart total for points calculation
      let cartTotalForPoints = window.CURRENT_CUSTOM_CART_TOTAL || calculateCustomCartTotal();
      
      console.log('Updating loyalty points calculation for cart total:', cartTotalForPoints);
      
      if (cartTotalForPoints <= 0) {
        pointsMessageEl.innerHTML = `You will earn <strong>0</strong> points with this order!`;
        return;
      }
      
      {% if customer and customer.metafields.loyalty.current_tier %}
        // Get loyalty tier data from customer metafield
        const loyaltyTierData = "{{ customer.metafields.loyalty.current_tier }}";
        
        // Make API call to calculate actual points using the simplified endpoint
        const requestData = {
          orderAmount: cartTotalForPoints,
          tierData: loyaltyTierData
        };
        
        console.log('Calculating loyalty points for cart total:', cartTotalForPoints, 'with tier:', loyaltyTierData);
        
        // Cancel any previous API request if still pending
        if (window.loyaltyPointsController) {
          window.loyaltyPointsController.abort();
        }
        window.loyaltyPointsController = new AbortController();
        
        fetch('https://ecovar-middleware-production.up.railway.app/api/loyalty/calculate-points-metafield', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(requestData),
          signal: window.loyaltyPointsController.signal
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`API error: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('Loyalty points calculation result:', data);
          const pointsEarned = data.totalPointsEarned || 0;
          const pointsRate = data.pointsPerAED || 0;
          pointsMessageEl.innerHTML = `You will earn <strong>${pointsEarned}</strong> points with this order!`;
        })
        .catch(error => {
          if (error.name === 'AbortError') {
            console.log('Loyalty points request was cancelled');
            return;
          }
          console.error('Error calculating loyalty points:', error);
          // Fallback to simple calculation
          const pointsEarned = Math.floor(cartTotalForPoints * 0.05); // Default to Bronze rate
          pointsMessageEl.innerHTML = `You will earn approximately <strong>${pointsEarned}</strong> points with this order!`;
        });
      {% else %}
        // Fallback for customers without loyalty tier data
        const pointsEarned = Math.floor(cartTotalForPoints * 0.05); // Default to Bronze rate
        pointsMessageEl.innerHTML = `You will earn approximately <strong>${pointsEarned}</strong> points with this order!`;
      {% endif %}
    }

    // Smart loyalty points update - only when cart total actually changes
    let lastKnownCartTotal = 0;
    let loyaltyUpdateTimeout = null;
    
    function updateLoyaltyPointsDisplay() {
      console.log('Updating loyalty points display...');
      
      // Always update the discount logic (client-side, no API)
      reapplyLoyaltyDiscount();
      
      // Only call API if cart total actually changed
      const currentTotal = window.CURRENT_CUSTOM_CART_TOTAL || calculateCustomCartTotal();
      if (Math.abs(currentTotal - lastKnownCartTotal) > 0.01) { // Allow for small rounding differences
        console.log('Cart total changed from', lastKnownCartTotal, 'to', currentTotal, '- updating loyalty points');
        lastKnownCartTotal = currentTotal;
        
        // Debounce API calls - cancel previous call if still pending
        if (loyaltyUpdateTimeout) {
          clearTimeout(loyaltyUpdateTimeout);
        }
        
        loyaltyUpdateTimeout = setTimeout(() => {
          updatePointsEarnedMessage();
        }, 500); // Wait 500ms for more changes before making API call
      } else {
        console.log('Cart total unchanged, skipping loyalty API call');
      }
    }

    // Initial setup - run immediately when page loads
    updateLoyaltyPointsDisplay();
    
    // Only listen to meaningful cart events, not every user interaction
    document.addEventListener('shopify:cart:updated', function() {
      console.log('Shopify cart updated');
      updateLoyaltyPointsDisplay();
    });
    
    document.addEventListener('custom-prices-updated', function() {
      console.log('Custom prices updated event received');
      updateLoyaltyPointsDisplay();
    });

  });
</script>

{% schema %}
{
  "name": "t:sections.main-cart-footer.name",
  "class": "cart__footer-wrapper",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 40
    }
  ],
  "blocks": [
    {
      "type": "subtotal",
      "name": "t:sections.main-cart-footer.blocks.subtotal.name",
      "limit": 1
    },
    {
      "type": "buttons",
      "name": "t:sections.main-cart-footer.blocks.buttons.name",
      "limit": 1
    },
    {
      "type": "@app"
    }
  ]
}
{% endschema %}
